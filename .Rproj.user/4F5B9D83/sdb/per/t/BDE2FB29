{
    "contents" : "require(shiny)\nrequire(googleVis)\nrequire(knitr)\nrequire(xtable)\n# require(ggplot2)\n# devtools::install_github(\"wesanderson\",\"karthik\")\n# require(wesanderson)\n# devtools::install_github(\"shiny-incubator\", \"rstudio\")\nrequire(shinyIncubator)\n\n## entropy\nload(\"data/Ant.rda\")\nload(\"data/Birds.rda\")\nload(\"data/Seedlings.rda\")\nload(\"data/Spider.rda\")\nsource(\"sub/subfun.R\")\nsource(\"sub/entropyFunction.R\")\n\n## mi\ncanopy <- read.csv(\"data-mi/canopy.csv\", header=FALSE)\nmidstory <- read.csv(\"data-mi/midstory.csv\", header=FALSE)\nunderstory <- read.csv(\"data-mi/understory.csv\", header=FALSE)\n\nsource(\"sub-mi/miFunction.R\")\n\n\nshinyServer(function(input, output, session) {\n  tempRD2 <- paste(tempfile(), \".RData\", sep=\"\")\n  tempRD3 <- paste(tempfile(), \".RData\", sep=\"\")\n  \n  loadPaste <- reactive({\n    if (input$source == 'import') {\n      if (input$datatype == \"abu\") {\n        text <- input$copyAndPaste_abu\n      } else {\n        text <- input$copyAndPaste_inc\n      }\n    } else {\n      if (is.null(input$files)) {\n        text <- \"Not_uploaded\"\n      } else {\n        fileName <- input$files$datapath\n        \n        if (ncol(read.csv(fileName)) == 1) {\n          temp <- readChar(fileName, file.info(fileName)$size)\n          text <- gsub(pattern=\"\\r\", replacement=\" \", temp)\n        } else {\n          da <- read.csv(fileName, header=F)\n          \n          txt <- character()\n          for(i in 1:ncol(read.csv(fileName))) {\n            temp <- as.character(da[, i])\n            txt[i] <- paste(temp,collapse=\" \")\n          }\n          \n          for(i in 2:ncol(read.csv(fileName))) {\n            txt[i] <- paste0(\" \\n\", txt[i])\n          }\n          text <- paste0(txt, collapse=\" \") \n        }\n      }\n    }\n    \n    ##  把文字檔轉成數個vector而成的list\n    Fun <- function(e){\n      #  text change to character\n      temp <- lapply(readLines(textConnection(text)), function(x) scan(text = x, what='char'))\n      out <- list()\n      out.name <- 0\n      for(i in seq_along(temp)){\n        out.name[i] <- temp[[i]][1]\n        out[[i]] <- as.numeric(temp[[i]][-1])\n      }\n      names(out) <- t(data.frame(out.name))\n      out\n    }\n    tryCatch(Fun(e), error=function(e){return()})\n  })\n  \n  #Get Input data name list\n  getDataName <- reactive({\n    Fun <- function(e){\n      out <- loadPaste()\n      out.name <- names(out)\n      if(is.na(names(out)[1]) == TRUE) {\n        dat <- paste(\"No data\")\n        dat\n      } else {\n        dat <- out\n        ##  把list裡面的vector取出來!\n        for(i in seq_along(out)){\n          dat[[i]] <- out.name[i]\n        }\n        dat        \n      }    \n    }\n    tryCatch(Fun(e), error=function(e){return()})\n  })\n  \n  selectedData <- reactive({\n    out <- loadPaste()\n    selected <- 1\n    dataset <- list()\n    for(i in seq_along(input$dataset)){\n      selected[i] <- which(names(out)==input$dataset[i])\n    }\n    for(i in seq_along(selected)){\n      k <- selected[i]\n      dataset[[i]] <- out[[k]]\n    }\n    names(dataset) <- input$dataset\n    return(dataset)    \n  })\n  \n  \n  #Select data\n  output$choose_dataset <- renderUI({\n    dat <- getDataName()\n    selectInput(\"dataset\", \"Select dataset:\", choices = dat, selected = dat[1], multiple = TRUE, selectize=FALSE)  \n  })\n  \n  mymethod <- reactive({\n    if (input$datatype == \"abu\")\n      out <- input$method1\n    if (input$datatype == \"inc\")\n      out <- input$method2\n    return(out)\n  })\n  \n  output$data_summary <- renderPrint({\n    if (input$goButton == 0) return(NULL)\n    isolate({\n      if (input$source == 'upload') {\n        if (is.null(input$files)) {\n          return()\n        }\n      }\n      dataset <-   selectedData()\n      if (input$datatype == \"abu\") {\n        \n        summ <- lapply(dataset, function(x) {\n          BasicInfoFun_Ind(x, input$nboot)\n        })\n      }\n      \n      if (input$datatype == \"inc\") {\n        summ <- lapply(dataset, function(x) {\n          BasicInfoFun_Sam(x, input$nboot)\n        })\n      }\n      return(summ)        \n    })\n  })\n  \n  \n  computation <- reactive({\n    dataset <- selectedData()\n    out <- lapply(dataset, function(x) {\n      temp <- ChaoEntropyOnline(data=x, datatype=input$datatype, method=mymethod(),\n                                nboot=input$nboot, conf=input$conf)\n      temp <- round(temp, 3)\n      gis <- temp\n      return(list(temp, gis))\n    })\n    out\n  })\n  \n  output$est <- renderPrint({\n    if (input$goButton == 0) return(NULL)\n    isolate({\n      if (input$source == 'upload') {\n        if (is.null(input$files)) {\n          return()\n        }\n      }\n      withProgress(session, min=0, max=input$nboot, expr={\n        for (i in 1:input$nboot) {\n          setProgress(message = 'Calculation in progress',\n                      detail = 'This may take a while :)',\n                      value=i)\n          Sys.sleep(0.0001)\n        }\n        dataset <- selectedData()\n        out <- computation()\n        excl <- list()\n        gtab <- list()\n        for (i in seq_along(dataset)) {\n          excl[i] <- list(out[[i]][[1]])\n          gtab[i] <- list(out[[i]][[2]])\n        }\n        names(gtab) <- input$dataset\n        names(excl) <- input$dataset\n        saveRDS(excl, tempRD2)\n        return(gtab)\n      })\n    })\n  })\n  \n  getNumberOfPlots <- reactive({\n    if (input$goButton == 0) return(1)\n    isolate({\n      return(length(input$dataset))\n    })\n  })\n  getVarHeight <- function (){\n    return(getNumberOfPlots() * 400)\n  }\n  \n  ##  Picture\n  output$visualization <- renderPlot({\n    if (input$goButton == 0) return(NULL)\n    isolate({\n      if (input$source == 'upload') {\n        if (is.null(input$files)) {\n          return()\n        }\n      }\n      withProgress(session, min=0, max=input$nboot, expr={\n        for (i in 1:input$nboot) {\n          setProgress(message = 'Calculation in progress',\n                      detail = 'This may take a while :)',\n                      value=i)\n          Sys.sleep(0.0001)\n        }\n        dataset <- selectedData()\n        out <- computation()\n        pic <- list()\n        par(mfrow=c(length(dataset), 1))\n        for (i in seq_along(dataset)) {\n          tab <- out[[i]][[1]]\n          name.ag <- rownames(tab)\n          plot(tab[,1], ylim=c(min(tab[,3]),max(tab[,4])), pch=2, cex=1.5, xlab=\"\",\n               ylab=\"Shannon entropy\", las=2, xaxt=\"n\")\n          axis(1, at=1:nrow(tab), labels=name.ag)\n          arrows(1:nrow(tab), tab[,4], 1:nrow(tab), tab[,3], angle=90, code=3, length=.1)\n          \n        }\n        #         print(multiplot4shiny(pic, cols=1))\n      })\n    })\n  }, height=getVarHeight)\n  \n  #Download ChaoEntropy output \n  output$dlest <- downloadHandler(\n    filename = function() { paste('output_', Sys.Date(), '_[ChaoEntropy].csv', sep='') },\n    content = function(file) { \n      out <- readRDS(tempRD2)\n      saveList2csv(out, file)\n    }\n  )\n  \n  #######################  START to Mutual Information  #######################\n  #######################  START to Mutual Information  #######################\n  #######################  START to Mutual Information  #######################\n  \n  MIdemoDataset <- list(midstory=midstory, understory=understory, canopy=canopy)\n  \n  MIdata <- reactive({\n    if (input$MIsource == 'MIdemo') {\n      midata <- MIdemoDataset\n    } else {\n      if (is.null(input$MIfiles1) & is.null(input$MIfiles2) & is.null(input$MIfiles3)) {\n        midata <- NULL\n      } else {\n        name1 <- input$MIfiles1$name\n        name2 <- input$MIfiles2$name\n        name3 <- input$MIfiles3$name\n        na1 <- gsub(pattern=\".csv\", replacement=\"\", x=name1)\n        na2 <- gsub(pattern=\".csv\", replacement=\"\", x=name2)\n        na3 <- gsub(pattern=\".csv\", replacement=\"\", x=name3)\n        if (is.null(input$MIfiles2)) {\n          midata <- list(read.csv(input$MIfiles1$datapath, header=FALSE))\n          names(midata) <- c(na1)          \n        } else if (is.null(input$MIfiles3)) {\n          midata <- list(read.csv(input$MIfiles1$datapath, header=FALSE),\n                         read.csv(input$MIfiles2$datapath, header=FALSE))\n          names(midata) <- c(na1, na2)\n        } else {\n          midata <- list(read.csv(input$MIfiles1$datapath, header=FALSE),\n                         read.csv(input$MIfiles2$datapath, header=FALSE),\n                         read.csv(input$MIfiles3$datapath, header=FALSE))\n          names(midata) <- c(na1, na2, na3)\n        }\n      }\n    }\n    out <- lapply(midata, function(x) {\n      colnames(x) <- c(\"Var.\", as.vector(as.matrix(x[1, -1])))\n      rownames(x) <- c(as.matrix(x[, 1]))\n      x2 <- x[-1, -1]\n      x2\n    })\n    out\n  })\n  \n  MIgetDataName <- reactive({\n    out <- MIdata()\n    out.name <- names(out)\n    out.name\n  })\n  \n  output$MIchoose_dataset <- renderUI({\n    dat <- MIgetDataName()\n    selectInput(\"MIdataset\", \"Select dataset:\", choices = dat, selected = dat[1], multiple = TRUE, selectize=FALSE)  \n  })\n  \n  \n  MIselectedData <- reactive({\n    out <- MIdata()\n    selected <- 1\n    dataset <- list()\n    for(i in seq_along(input$MIdataset)){\n      selected[i] <- which(names(out) == input$MIdataset[i])\n    }\n    for(i in seq_along(selected)){\n      k <- selected[i]\n      dataset[[i]] <- out[[k]]\n    }\n    names(dataset) <- input$MIdataset\n    return(dataset)    \n  })\n  \n  output$MIdata_summary <- renderUI({\n    if (input$MIgoButton == 0) return(NULL)\n    isolate({\n      if (input$MIsource == 'MIupload') {\n        if (is.null(input$MIfiles1) & is.null(input$MIfiles2) & is.null(input$MIfiles3)) {\n          return()\n        }\n      }\n      dataset <- MIselectedData()\n      tab <- list()\n      for(i in seq_along(dataset)){\n        data <- dataset[[i]]\n        caption <- paste(\"<H5>\", names(dataset)[i], \"</H5>\", sep=\"\")\n        \n        digits <- rep(3, (ncol(data) + 1))\n        tab[[i]] <- print(xtable(data, caption=caption, digits=digits), \n                          type='html', \n                          caption.placement='top',\n                          html.table.attributes=\"class='data table table-condensed table-condensed'\",\n                          print.results=FALSE)\n      }\n      HTML(paste(unlist(tab),collapse=\"\\n\"))\n    })\n  })\n  \n  MIcomputation <- reactive({\n    dataset <- MIselectedData()\n    dataset2 <- lapply(dataset, function(x) {\n      x <- x[, -1]\n      for (i in 1:ncol(x)) {\n        x[, i] <- as.numeric(as.character(x[, i]))\n      }\n      x\n    })\n    out <- lapply(dataset2, function(x) {\n      temp <- ChaoMI(data=x, method=input$MImethod, nboot=input$MInboot, conf=input$MIconf)\n      temp <- round(temp, 3)\n      gis <- temp\n      return(list(temp, gis))\n    })\n    out\n  })\n  \n  output$MIest <- renderPrint({\n    if (input$MIgoButton == 0) return(NULL)\n    isolate({\n      if (input$MIsource == 'MIupload') {\n        if (is.null(input$MIfiles1) & is.null(input$MIfiles2) & is.null(input$MIfiles3)) {\n          return()\n        }\n      }\n      withProgress(session, min=0, max=input$MInboot, expr={\n        for (i in 1:input$MInboot) {\n          setProgress(message = 'Calculation in progress',\n                      detail = 'This may take a while :)',\n                      value=i)\n          Sys.sleep(0.0001)\n        }\n        dataset <- MIselectedData()\n        out <- MIcomputation()\n        excl <- list()\n        gtab <- list()\n        for (i in seq_along(dataset)) {\n          excl[i] <- list(out[[i]][[1]])\n          gtab[i] <- list(out[[i]][[2]])\n        }\n        names(gtab) <- input$MIdataset\n        names(excl) <- input$MIdataset\n        saveRDS(excl, tempRD3)\n        return(gtab)\n      })\n    })\n  })\n  \n  output$MIdlest <- downloadHandler(\n    filename = function() { paste('output_', Sys.Date(), '_[ChaoMI].csv', sep='') },\n    content = function(file) { \n      out <- readRDS(tempRD3)\n      saveList2csv(out, file)\n    }\n  )\n  \n  MIgetNumberOfPlots <- reactive({\n    if (input$MIgoButton == 0) return(1)\n    isolate({\n      return(length(input$MIdataset))\n    })\n  })\n  MIgetVarHeight <- function(){\n    return(MIgetNumberOfPlots() * 400)\n  }\n  \n  \n  output$MIvisualization <- renderPlot({\n    if (input$MIgoButton == 0) return(NULL)\n    isolate({\n      if (input$MIsource == 'MIupload') {\n        if (is.null(input$MIfiles1) & is.null(input$MIfiles2) & is.null(input$MIfiles3)) {\n          return()\n        }\n      }\n      withProgress(session, min=0, max=input$MInboot, expr={\n        for (i in 1:input$MInboot) {\n          setProgress(message = 'Calculation in progress',\n                      detail = 'This may take a while :)',\n                      value=i)\n          Sys.sleep(0.0001)\n        }\n        dataset <- MIselectedData()\n        out <- MIcomputation()\n        pic <- list()\n        par(mfrow=c(length(dataset), 1))\n        for (i in seq_along(dataset)) {\n          tab <- out[[i]][[1]]\n          name.ag <- rownames(tab)\n          plot(tab[,1], ylim=c(min(tab[,3]),max(tab[,4])), pch=2, cex=1.5, xlab=\"\",\n               ylab=\"Mutual Information\", las=2, xaxt=\"n\")\n          axis(1, at=1:nrow(tab), labels=name.ag)\n          arrows(1:nrow(tab), tab[,4], 1:nrow(tab), tab[,3], angle=90, code=3, length=.1)\n        }\n        #         print(multiplot4shiny(pic, cols=1))\n      })\n    })\n  }\n  , height=MIgetVarHeight)\n})\n",
    "created" : 1403178346424.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1535405886",
    "id" : "BDE2FB29",
    "lastKnownWriteTime" : 1403177896,
    "path" : "~/Documents/GitHub/ChaoEntropy-beta-local/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}