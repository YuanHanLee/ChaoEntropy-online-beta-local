{
    "contents" : "# if (!require(\"devtools\"))\n#   install.packages(\"devtools\")\n# devtools::install_github(\"rstudio/shinyapps\")\n\nrequire(shiny)\n# require(shinyapps)\nrunApp()\n# Sys.setlocale(locale=\"en_US.UTF-8\")\n# shinyapps::setAccountInfo(name=\"yuanhan\", token=\"4881B64B620AD253874E56C55F3E30A6\", secret=\"QfoTdUh2d/n58/uInqLbF6QAD9se40X7vibPrSyB\")\n# # shinyapps::setAccountInfo(name=\"yuanhanlee\", token=\"6860FBA5FCD49B05AD8E8496A2B0A4F6\", secret=\"2LGmzot0O60v/MRbWCZPDQYcURegqqtAVRbfdZAM\")\n# deployApp(appName=\"ChaoEntropy-beta\")\n\n\n\n## for testing\ntext <- \"Spider 46 22 17 15 15  9  8  6  6  4  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  \\nBirds 752 276 194 126 121 97  95  83  72  44  39  0  16  15  0  13  9  9  9  8  7  4  0  0  2  2  1  1  1\"\ntemp <- lapply(readLines(textConnection(text)), function(x) scan(text = x, what='char'))\nout <- list()\nout.name <- 0\nfor(i in seq_along(temp)){\n  out.name[i] <- temp[[i]][1]\n  out[[i]] <- as.numeric(temp[[i]][-1])\n}\nnames(out) <- t(data.frame(out.name))\nselected <- 1\ndataset <- list()\ninput <- list(dataset=names(out))\nfor(i in seq_along(input$dataset)){\n  selected[i] <- which(names(out)==input$dataset[i])\n}\nfor(i in seq_along(selected)){\n  k <- selected[i]\n  dataset[[i]] <- out[[k]]\n}\nnames(dataset) <- input$dataset\n# x <- dataset$Spider\nout <- lapply(dataset, function(x) {\n  temp <- ChaoEntropyOnline(data=x, conf=0.9)\n  temp <- round(temp, 3)\n  \n  ##  Google Vis Table\n  output <- as.data.frame(temp)\n  tab <- cbind(Methods=rownames(output), output)\n  rownames(tab) <- NULL\n  \n  ## Let 1 --> 1.000\n  ## Let the number put in center\n  for (i in 2:5) {\n    tab[, i] <- sprintf(\"%1.3f\", tab[, i])\n    tab[, i] <- sprintf(\"<center>%s</center>\", tab[, i])\n  }\n  \n  gis <- gvisTable(tab, options=list(width='90%', height='60%', allowHtml=TRUE))\n  plot(gis)\n  gis$html <- gis$html[-c(3:4)]\n  return(list(temp, gis))\n})\n\npic <- list()\ni <- 1\nfor (i in seq_along(dataset)) {\n  temp <- out[[i]][[1]]\n  index <- letters[1:nrow(temp)]\n  df <- data.frame(index, rownames(temp), temp)\n  rownames(df) <- NULL\n  colnames(df) <- c(\"id\", \"Methods\", \"Estimator\", \"SE\", \"Lower\", \"Upper\")\n  p <- ggplot(df, aes(id, Estimator, ymin=Lower, ymax=Upper, colour=id))\n  pout <- p + geom_errorbar(width = 0.5, size=2) + geom_point(size=6) + labs(title=names(dataset[i]), x=\"Methods\") + \n    scale_color_manual(values=c(wes.palette(5, \"Darjeeling\"), 1), name=\"Methods\", breaks=index, labels=rownames(temp)) + \n    scale_x_discrete(breaks=index, labels=rownames(temp))  \n  pic[i] <- list(pout)\n}\nprint(multiplot4shiny(pic, cols=1))\n\n\n\n## testing for upload\nfileName <- \"~/Downloads/test.csv\"\nif (ncol(read.csv(fileName)) == 1) {\n  temp <- readChar(fileName)\n  temp <- readChar(fileName, file.info(fileName)$size)\n  text <- gsub(pattern=\"\\r\", replacement=\" \", temp)\n  \n  \n  \n  \n  #### START to Mutual Information\n  \n  input <- list(MIdataset=c(\"Formicinae\", \"Myrmicinae\"), \n                MIfiles1=list(name=\"Formicinae.csv\", datapath=\"~/Downloads/Formicinae.csv\"),\n                MIfiles2=list(name=\"Myrmicinae.csv\", datapath=\"~/Downloads/Myrmicinae.csv\"),\n                MIfiles3=list(name=\"Dolichoderinae.csv\", datapath=\"~/Downloads/Dolichoderinae.csv\"))\n  \n  input$MIdataset\n  fileName <- \"upload-mi/obligate.csv\"\n  obligate <- read.csv(fileName, header=TRUE)\n  ncol(obligate)\n  if (input$MIgoButton == 0) return(NULL)\n  isolate({\n    withProgress(session, min=0, max=input$MInboot, expr={\n      for (i in 1:input$MInboot) {\n        setProgress(message = 'Calculation in progress',\n                    detail = 'This may take a while :)',\n                    value=i)\n        Sys.sleep(0.0001)\n      }\n      #     !!!!!!content!!!!\n    })\n  })\n  \n  \n  MIgetDataName <- reactive({\n    if (input$MIsource == 'demo') {\n      out <- names(MIdemoDataset)\n    } else {\n      if (is.null(input$MIfiles1) & is.null(input$MIfiles2) & is.null(input$MIfiles3)) {\n        out <- \"Not_uploaded\"\n      } else {\n        name1 <- input$MIfiles1$name\n        name2 <- input$MIfiles2$name\n        out <- c(name1, name2)\n      }\n    }\n  })\n  \n  \n  output$choose_dataset <- renderUI({\n    dat <- getDataName()\n    selectInput(\"dataset\", \"Select dataset:\", choices = dat, selected = dat[1], multiple = TRUE, selectize=FALSE)  \n  })\n  \n  \n  conditionalPanel(condition=\"input.MIsource == 'demo'\",\n                   selectInput(\"MIdataset\", \"Select dataset:\", \n                               choices = c(\"Dolichoderinae\", \"Formicinae\", \"Myrmicinae\"), \n                               selected = \"Dolichoderinae\", multiple = TRUE, selectize=FALSE),\n                   p(em(\"Using ctrl / command key to select multiple datasets you want\"))\n  ),\n  \n  \n  fileName <- \"~/Downloads/opportunistic.csv\"\n  test2 <- read.csv(fileName, header=FALSE)\n  \n  \n  plant <- read.csv(\"~/Dropbox/李元瀚碩論/realdata/植物與食果動物.csv\", header=TRUE)\n  rownames(plant) <- plant[, 1]\n  plant <- plant[, -1]\n  \n  canopy <- plant[-1, plant[1, ] == \"C\"]\n  understory <- plant[-1, plant[1, ] == \"U\"]\n  midstory <- plant[-1, plant[1, ] == \"M\"]\n  \n  for (i in 1:ncol(canopy)) {\n    canopy[, i] <- as.numeric(as.character(canopy[, i]))\n  }\n  for (i in 1:ncol(understory)) {\n    understory[, i] <- as.numeric(as.character(understory[, i]))\n  }\n  for (i in 1:ncol(midstory)) {\n    midstory[, i] <- as.numeric(as.character(midstory[, i]))\n  }\n  \n  write.csv(canopy, \"canopy.csv\")\n  write.csv(midstory, \"midstory.csv\")\n  write.csv(understory, \"understory.csv\")\n  \n  a <- a[, -1]\n  for (i in 1:ncol(a)) {\n    a[, i] <- as.numeric(as.character(a[, i]))\n  }\n  ",
    "created" : 1403178351121.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "1443444571",
    "id" : "DE81EB34",
    "lastKnownWriteTime" : 4511124496,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}